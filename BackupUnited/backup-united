#!/bin/bash

WDIR=/usr/local/backup-united
BACKUP_SCRIPTS=$WDIR/backup-scripts
BACKUPS=$WDIR/backups

function pause(){
local message="$@"
[ -z $message ] && message="Press [Enter] to continue ..."
read -p "$message" readEnterKey
}

function show_menu(){
date
echo -e
tput setaf 5
echo "     BACKUP UNITED                                "
tput sgr0
echo "   |---------------------------------------------|"
echo "   | SMB Share Backup                            |"
echo "   |---------------------------------------------|"
echo "   | 1.Add    Backup Job  | 11.Backup List       |"
echo "   | 2.Remove Backup Job  | 12.Restore Backup    |"
echo "   | -------------------- | 13.Clean Backup      |"
echo "   | 3.Backup Job List    |                      |"
echo "   |---------------------------------------------|"
echo "   | 10.Backup Now        | 20. Set Job Schedule |"
echo "   |                      | 21. Schedule Jobs    |"
echo "   |---------------------------------------------|"
tput setaf 5
echo "     Mail Notification Settings                   "
tput sgr0
echo "   |---------------------------------------------|"
echo "   | 4.Mail Settings     |                       |"
echo "   | 5.Add    Recipient  |                       |"
echo "   | 5.Remove Recipient  |                       |"
echo "   |---------------------------------------------|"
tput setaf 9
echo "                     -----------                  "
echo "                     ** BOARD **                  "
echo "                     -----------                  "
tput setaf 1
tput sgr0
echo "     $BOARDMSG                                    "
echo "   -----------------------------------------------"
tput setaf 9
echo ""
echo "    -----------"
echo "    | 99.Exit |"
echo "    -----------"
tput sgr0
echo -e
}

function backup_list(){
ls /usr/local/backup-united/backup/ > /tmp/folderlist
numfolder=$(cat /tmp/folderlist | wc -l)
i=1
while [ "$i" -le $numfolder ]; do
folder=$(ls -l | sed -n $i{p} /tmp/folderlist)
cd /usr/local/backup-united/backup/$folder
pwd
rdiff-backup -l /usr/local/backup-united/backup/$folder
i=$(( i + 1 ))
done
rm -rf /tmp/folderlist
pause
}

function add_backup(){
choice=$(whiptail --title "types of backup" --radiolist "Choose:"     30 40 20 \
	"local-folder_Backup" "" off \
	"cifs-share_Backup" "" off 3>&1 1>&2 2>&3)
case $choice in
local-folder_Backup)
BACKUPNAME=$(whiptail --title "Backup Name" --inputbox "Please Enter Backup Name to be Defined" 10 60  3>&1 1>&2 2>&3)
BACKUPPATH=$(whiptail --title "Path of the Area" --inputbox "Please Enter the Destination of the Backup Area (/mnt/backup1,/var/www)" 10 60  3>&1 1>&2 2>&3)
cat > /usr/local/backup-united/backup-scripts/$BACKUPNAME <<EOF
#!/bin/bash
BCKDATE='"$(date)"'
BCKSTATE=1
rdiff-backup /mnt/backup-1 /usr/local/backup-united/backup/Backup1 > /dev/null && BCKSTATE=0 && \
	echo "Backup1     Successfully    " '"$BCKDATE"' >> /usr/local/backup-united/notification/mail-message
if [ '"$BCKSTATE"' = 1 ]
then
echo "Backup1     FAILED          " '"$BCKDATE"' >> /usr/local/backup-united/notification/mail-message
fi
EOF
;;
cifs-share_Backup)
echo "cifs-share Backup"
BACKUPNAME=$(whiptail --title "Backup Name" --inputbox "Please Enter Backup Name to be Defined" 10 60  3>&1 1>&2 2>&3)
BACKUPPATH=$(whiptail --title "Path of the Area" --inputbox "Please Enter the Destination of the Backup Area (//SERVER_IP/SHARE)" 10 60  3>&1 1>&2 2>&3)
BACKUPUSR=$(whiptail --title "Username" --inputbox "Please Enter Username for Access" 10 60  3>&1 1>&2 2>&3)
BACKUPPWD=$(whiptail --title "Password" --inputbox "Please Enter Password for Access" 10 60  3>&1 1>&2 2>&3)

JOCKER=$
cat > $BACKUP_SCRIPTS/$BACKUPNAME <<EOF
#!/bin/bash
if [ -d "/tmp/$BACKUPNAME" ]; then
rm -rf /tmp/$BACKUPNAME
fi
if [ -e "/tmp/$BACKUPNAME-mountok" ]; then
rm -rf /tmp/$BACKUPNAME-mountok
fi
if [ ! -d "/usr/local/backup-united/backups/$BACKUPNAME" ]; then
mkdir /usr/local/backup-united/backups/$BACKUPNAME
fi
mkdir /tmp/$BACKUPNAME
mount -t cifs $BACKUPPATH /tmp/$BACKUPNAME -o username=$BACKUPUSR,password=$BACKUPPWD && touch /tmp/$BACKUPNAME-mountok
if [ -e "/tmp/$BACKUPNAME-mountok" ]
then
rsync -avz /tmp/$BACKUPNAME /usr/local/backup-united/backups/$BACKUPNAME
tar -czf /usr/local/backup-united/backups/$BACKUPNAME-"$JOCKER(date +%Y%m%d-%H%M).tar.gz" /usr/local/backup-united/backups/$BACKUPNAME
echo "SUCCESS $BACKUPNAME" >> /usr/local/backup-united/mail-message
umount /tmp/$BACKUPNAME
rm -rf /tmp/$BACKUPNAME-mountok
else
echo "FAILURE $BACKUPNAME" >> /usr/local/backup-united/mail-message
fi
EOF
;;
*)
;;
esac
pause
}
#rdiff-backup /tmp/$BACKUPNAME/ /usr/local/backup-united/backups/$BACKUPNAME

function del_backup(){
BACKUPNAME=$(whiptail --title "Backup Name" --inputbox "Please Enter Backup Name to be Deleted" 10 60  3>&1 1>&2 2>&3)
if [ -e "$BACKUP_SCRIPTS/$BACKUPNAME" ]
then
rm -rf $BACKUP_SCRIPTS/$BACKUPNAME
else
whiptail --msgbox "Backup Not Found!!" 20 20
fi
pause
}

function added_backups(){
echo "*** Added Backup List ***"
ls /usr/local/backup-united/backup-scripts  > /tmp/backuplist.txt
cat /tmp/backuplist.txt
rm -f /tmp/backuplist.txt
pause
}

function clean_backup(){
ls /usr/local/backup-united/backup/ > /tmp/folderlist
numfolder=$(cat /tmp/folderlist | wc -l)
i=1
while [ "$i" -le $numfolder ]; do
folder=$(ls -l | sed -n $i{p} /tmp/folderlist)
cd /usr/local/backup-united/backup/$folder
pwd
rdiff-backup --remove-older-than 15D /usr/local/backup-united/backup/$folder
i=$(( i + 1 ))
done
rm -rf /tmp/folderlist
pause
}

function backup_now(){
cp /usr/local/backup-united/notification/99-mail-sender /usr/local/backup-united/backup-scripts/
chmod +x /usr/local/backup-united/backup-scripts/*
run-parts /usr/local/backup-united/backup-scripts
pause
}

function mail_settings(){
MAILADDR=$(whiptail --title "Backup Name" --inputbox "Please Enter E-Mail Address" 10 60  3>&1 1>&2 2>&3)
SMTP=$(whiptail --title "Path of the Area" --inputbox "Please Enter SMTP Address-SMTP Port your Mailserver (smtp.gmail.com:587)" 10 60  3>&1 1>&2 2>&3)
MAILUSER=$(whiptail --title "Username" --inputbox "Please Enter Username for E-Mail Address" 10 60  3>&1 1>&2 2>&3)
MAILPASS=$(whiptail --title "Password" --inputbox "Please Enter Password for E-Mail Address" 10 60  3>&1 1>&2 2>&3)
MAILDOMAIN=$(whiptail --title "Domain" --inputbox "Please Enter Domain for E-Mail Address (gmail.com,xyz.net etc)" 10 60  3>&1 1>&2 2>&3)
cat /dev/null > /etc/ssmtp/ssmtp.conf
cat > /etc/ssmtp/ssmtp.conf <<EOF
root=$MAILADDR
mailhub=$SMTP
AuthUser=$MAILUSER
AuthPass=$MAILPASS
UseTLS=YES
UseSTARTTLS=YES
rewriteDomain=$MAILDOMAIN
hostname=$HOSTNAME
FromLineOverride=YES
EOF
echo root:$MAILADDR:$SMTP
chfn -f 'backup-united' root

cp /usr/local/backup-united/notification/99-mail-sender /usr/local/backup-united/backup-scripts/
pause
}

function add_recipients(){
vim /usr/local/backup-united/notification/mail-recipients
pause
}

function backup_job_list(){
	tput setaf 8
	echo "Backup Job List"
	echo "---------------"
	tput sgr0
	ls $BACKUP_SCRIPTS
	echo -e
	pause
}

function backup_now(){
	chmod +x $BACKUP_SCRIPTS/*
	run-parts $BACKUP_SCRIPTS
	pause
}

function backup_list(){
	tput setaf 8
	echo "Backups"
	echo "---------------"
	tput sgr0
	tree $BACKUPS
	pause
}

function read_input(){
local c
read -p "Please choose from Menu numbers " c
case $c in
1)	add_backup;;
2)	del_backup;;
3)	backup_job_list;;
5)      clean_backup;;
10)	backup_now;;
11)	backup_list;;
8)	mail_settings;;
9)	add_recipients;;
99)	exit 0 ;;
*)	
echo "Please choose from Menu numbers"
pause
esac
}

# CTRL+C, CTRL+Z
trap '' SIGINT SIGQUIT SIGTSTP

while true
do
clear
show_menu
read_input
done
